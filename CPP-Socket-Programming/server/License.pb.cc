// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "License.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace license {

namespace {

const ::google::protobuf::Descriptor* License_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  License_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_License_2eproto() {
  protobuf_AddDesc_License_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "License.proto");
  GOOGLE_CHECK(file != NULL);
  License_descriptor_ = file->message_type(0);
  static const int License_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, global_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, node_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, node_session_rate_),
  };
  License_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      License_descriptor_,
      License::default_instance_,
      License_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(License));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_License_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    License_descriptor_, &License::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_License_2eproto() {
  delete License::default_instance_;
  delete License_reflection_;
}

void protobuf_AddDesc_License_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rLicense.proto\022\007license\"Q\n\007License\022\024\n\014g"
    "lobal_nodes\030\001 \002(\005\022\025\n\rnode_sessions\030\002 \002(\005"
    "\022\031\n\021node_session_rate\030\003 \002(\005", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "License.proto", &protobuf_RegisterTypes);
  License::default_instance_ = new License();
  License::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_License_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_License_2eproto {
  StaticDescriptorInitializer_License_2eproto() {
    protobuf_AddDesc_License_2eproto();
  }
} static_descriptor_initializer_License_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int License::kGlobalNodesFieldNumber;
const int License::kNodeSessionsFieldNumber;
const int License::kNodeSessionRateFieldNumber;
#endif  // !_MSC_VER

License::License()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void License::InitAsDefaultInstance() {
}

License::License(const License& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void License::SharedCtor() {
  _cached_size_ = 0;
  global_nodes_ = 0;
  node_sessions_ = 0;
  node_session_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

License::~License() {
  SharedDtor();
}

void License::SharedDtor() {
  if (this != default_instance_) {
  }
}

void License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* License::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return License_descriptor_;
}

const License& License::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_License_2eproto();  return *default_instance_;
}

License* License::default_instance_ = NULL;

License* License::New() const {
  return new License;
}

void License::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    global_nodes_ = 0;
    node_sessions_ = 0;
    node_session_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 global_nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_nodes_)));
          set_has_global_nodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_sessions;
        break;
      }
      
      // required int32 node_sessions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_sessions_)));
          set_has_node_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_session_rate;
        break;
      }
      
      // required int32 node_session_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_session_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_session_rate_)));
          set_has_node_session_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 global_nodes = 1;
  if (has_global_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->global_nodes(), output);
  }
  
  // required int32 node_sessions = 2;
  if (has_node_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_sessions(), output);
  }
  
  // required int32 node_session_rate = 3;
  if (has_node_session_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_session_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* License::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 global_nodes = 1;
  if (has_global_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->global_nodes(), target);
  }
  
  // required int32 node_sessions = 2;
  if (has_node_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_sessions(), target);
  }
  
  // required int32 node_session_rate = 3;
  if (has_node_session_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_session_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int License::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 global_nodes = 1;
    if (has_global_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_nodes());
    }
    
    // required int32 node_sessions = 2;
    if (has_node_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_sessions());
    }
    
    // required int32 node_session_rate = 3;
    if (has_node_session_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_session_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const License* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const License*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_global_nodes()) {
      set_global_nodes(from.global_nodes());
    }
    if (from.has_node_sessions()) {
      set_node_sessions(from.node_sessions());
    }
    if (from.has_node_session_rate()) {
      set_node_session_rate(from.node_session_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void License::Swap(License* other) {
  if (other != this) {
    std::swap(global_nodes_, other->global_nodes_);
    std::swap(node_sessions_, other->node_sessions_);
    std::swap(node_session_rate_, other->node_session_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = License_descriptor_;
  metadata.reflection = License_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace license

// @@protoc_insertion_point(global_scope)
